featCol2 <- rep('grey80', nrow(X))
featCol2[select] <- 'blue'
pairs(test$x[,1:3], col = featCol2)
pairs(test$x[,1:3], col = featCol)
p <- 1000
(p - p*.1)
X <- lapply(1:p, function(i){
if(i<=(p - p*.1))
rbinom(N, 1, .5)
else
c(rbinom(N/2, 1, .2), rbinom(N/2, 1, .8))
})
X <- do.call(rbind, X)
grps <- factor(rep(c('A', 'B'), each = ncol(X)/2))
test <- prcomp(t(X))
plot(test$x, col = grps)
featCol <- c(rep('black', 180), rep('red', 20))
X2 <- .makeCont(X)
test <- prcomp(X2)
score <- pcaTraceQ(X2, test)
select <- pcaSelectQ(score, .8)
pairs(test$x[,1:3], col = featCol)
z
z <- (p - p*.1)
z
p-z
z <- p*.1
z
p-z
p-z
featCol <- c(rep('black', p-z), rep('red', z))
X2 <- .makeCont(X)
test <- prcomp(X2)
score <- pcaTraceQ(X2, test)
select <- pcaSelectQ(score, .8)
pairs(test$x[,1:3], col = featCol)
args(pcaTraceQ)
score <- pcaTraceQ(X2, test, Dim = 1:2)
select <- pcaSelectQ(score, .8)
pairs(test$x[,1:3], col = featCol)
featCol2 <- rep('grey80', nrow(X))
featCol2[select] <- 'blue'
pairs(test$x[,1:3], col = featCol2)
select <- pcaSelectQ(score, .9)
featCol2 <- rep('grey80', nrow(X))
featCol2[select] <- 'blue'
pairs(test$x[,1:3], col = featCol2)
select <- pcaSelectQ(score, .5)
score <- pcaTraceQ(X2, test, Dim = 1:2)
select <- pcaSelectQ(score, .5)
featCol2 <- rep('grey80', nrow(X))
featCol2[select] <- 'blue'
pairs(test$x[,1:3], col = featCol2)
select <- pcaSelectQ(score, .75)
featCol2 <- rep('grey80', nrow(X))
featCol2[select] <- 'blue'
pairs(test$x[,1:3], col = featCol2)
select
score <- pcaTraceQ(X2, test, Dim = 1:3)
select <- pcaSelectQ(score, .75)
featCol2 <- rep('grey80', nrow(X))
featCol2[select] <- 'blue'
pairs(test$x[,1:3], col = featCol2)
select
table(select>(p-z))
# Get the files list
require(synapseClient)
workflow <- synGet('syn2128342')
source(workflow@filePath)
op <- par(no.readonly = TRUE)
listFiles <- synapseQuery("select id, name from entity where entity.parentId == 'syn2116884'")
listFiles <- listFiles[grep('Profile', listFiles$entity.name),]
synId <- listFiles$entity.id[1]
# Get the undoSd values
segTable <- Params <- c()
K <- nrow(listFiles); k <- 1
for(synId in listFiles$entity.id){
cat('\n',k, 'of', K, '\tReading:', synId, '\t')
ent <- synGet(synId)
cgh <- get(load(ent@filePath))
tmpTable <- getSegTable(cgh)
nSegments <- nrow(tmpTable)
tmpPar <- getParam(cgh)
tmpInfo <- as.data.frame(t(getInfo(cgh)))
cat('Params\n')
Params <- rbind.data.frame(Params, cbind(sampleId=gsub('.txt.bz2','',tmpInfo$fileName),
tmpInfo, Results=synId, nSegments=nSegments,
dLRs=tmpPar$dLRs, MAD=tmpPar$MAD))
cat('Table\n')
segTable <- rbind.data.frame(segTable, tmpTable)
cat(nrow(segTable), '\n')
k = k + 1
}
.findBreaks <- function(Table){
all.breaks <- unique(c(Table$loc.start, Table$loc.end))
all.breaks <- sort(all.breaks)
return(all.breaks)
}
.getSegment <- function(subTable, Start, Stop){
index <- which(subTable$loc.start <= Start & subTable$loc.end >= Stop)
return(ifelse(length(index)>0, subTable$seg.med[index], NA))
}
mergeSegTab <- function(Table){
breaks <- .findBreaks(Table)
nbreaks <- length(breaks)-1
splitTable <- split(Table, Table$ID)
output <- lapply(1:(nbreaks), function(i){
Start <- breaks[i]+1
Stop <- breaks[i+1]
tmp <- lapply(splitTable, function(subTable) .getSegment(subTable, Start, Stop))
tmp <- c(Start = Start, Stop = Stop, do.call(c, tmp))
})
output <- as.data.frame(do.call(rbind, output))
return(output)
}
.getAnnotations <- function(cgh){
fileName <- getInfo(cgh, 'fileName')
sampleName <- gsub('.txt.bz2', '', fileName)
FEfile <- getInfo(cgh, 'synapseId')
c(sampleName=SampleName, fileName=fileName, FEfile=FEfile,
dLRs=tmpPar$dLRs, MAD=tmpPar$MAD,
)
}
head(segTable)
finalTable <- mergeSegTab(segTable)
head(Params)
head(Params)
.makeHeaders <- function(headers){
out <- lapply(1:length(headers)-1, function(i) paste0(headers[i], '|'))
return(c(do.call(c, out), headers[length(headers)]))
}
.makeHeaders(colnames(Params))
.makeHeaders <- function(headers){
out <- lapply(1:length(headers)-1, function(i) paste0(headers[i], '|'))
return(paste0(do.call(paste0, out), headers[length(headers)]))
}
makeHeaders(colnames(Params))
.makeHeaders <- function(headers){
out <- lapply(1:length(headers)-1, function(i) paste0(headers[i], '|'))
return(paste0(do.call(paste0, out), headers[length(headers)]))
}
.makeHeaders(colnames(Params))
headers <- colnames(Params)
headers
out <- lapply(1:length(headers)-1, function(i) paste0(headers[i], '|'))
out
i=1
headers[i]
paste0(headers[i], '|')
sprintf('%s|', headers[i])
out <- lapply(1:length(headers)-1, function(i) sprintf('%s|', headers[i]))
out
.makeHeaders <- function(headers){
out <- lapply(1:length(headers)-1, function(i) sprintf('%s|', headers[i]))
return(paste0(do.call(paste0, out), headers[length(headers)]))
}
.makeHeaders(colnames(Params))
.makeLine <- function(headers){
out <- lapply(1:length(headers)-1, function(i) sprintf('%s|', headers[i]))
return(paste0(do.call(paste0, out), headers[length(headers)], '\n'))
}
.makeLine(colnames(Params))
makeWikiTable <- function(Table)
.makeLine <- function(headers){
out <- lapply(1:length(headers)-1, function(i) sprintf('%s|', headers[i]))
return(paste0(do.call(paste0, out), headers[length(headers)], '\n'))
}
headers <- .makeLine(colnames(Params))
wikiTable <- lapply(1:nrow(Table), function(i) .makeLine(Table[i,]))
return(paste0(headers, do.call(c, wikiTable)))
}
.makeLine <- function(headers){
out <- lapply(1:length(headers)-1, function(i) sprintf('%s|', headers[i]))
return(paste0(do.call(paste0, out), headers[length(headers)], '\n'))
}
makeWikiTable <- function(Table){
.makeLine <- function(headers){
out <- lapply(1:length(headers)-1, function(i) sprintf('%s|', headers[i]))
return(paste0(do.call(paste0, out), headers[length(headers)], '\n'))
}
headers <- .makeLine(colnames(Table))
wikiTable <- lapply(1:nrow(Table), function(i) .makeLine(Table[i,]))
return(paste0(headers, do.call(c, wikiTable)))
}
makeWikiTable(Params[1:3,])
makeWikiTable <- function(Table){
.makeLine <- function(headers){
out <- lapply(1:length(headers)-1, function(i) sprintf('%s|', headers[i]))
return(paste0(do.call(paste0, out), headers[length(headers)], '\n'))
}
headers <- .makeLine(colnames(Table))
wikiTable <- lapply(1:nrow(Table), function(i) .makeLine(Table[i,]))
return(paste0(headers, do.call(paste0, wikiTable)))
}
makeWikiTable(Params[1:3,])
makeWikiTable <- function(Table){
.makeLine <- function(items){
if(is.factor(items)) items <- as.character(items)
out <- lapply(1:length(items)-1, function(i) sprintf('%s|', items[i]))
return(paste0(do.call(paste0, out), items[length(items)], '\n'))
}
headers <- .makeLine(colnames(Table))
wikiTable <- lapply(1:nrow(Table), function(i) .makeLine(Table[i,]))
return(paste0(headers, do.call(paste0, wikiTable)))
}
makeWikiTable(Params[1:3,])
items <- Table[1,]
items <- Params[1,]
items
out <- lapply(1:length(items)-1, function(i) sprintf('%s|', items[i]))
out
is.factor(items)
items
as.character(items)
as.vector(items)
out <- lapply(1:length(items)-1, function(i) sprintf('%s|', items[i]))
out
items
out <- lapply(1:length(items)-1, function(i) sprintf('%s|', as.character(items[i])))
out
i
items[i]
as.character(items[i])
gettext(items)
as.vector(items[i])
as.matrix(items[i])
as.character(as.vector(items[i]))
as.character(as.matrix(items[i]))
as.character(as.matrix(items))
is.character(items[1])
type(items[1])
class(items[1])
class(Params)
makeWikiTable <- function(Table){
Table <- as.matrix(Table)
.makeLine <- function(items){
out <- lapply(1:length(items)-1, function(i) sprintf('%s|', as.character(items[i])))
return(paste0(do.call(paste0, out), items[length(items)], '\n'))
}
headers <- .makeLine(colnames(Table))
wikiTable <- lapply(1:nrow(Table), function(i) .makeLine(Table[i,]))
return(paste0(headers, do.call(paste0, wikiTable)))
}
makeWikiTable(Params[1:3,])
makeWikiTable <- function(Table){
Table <- as.matrix(Table)
.makeLine <- function(items){
out <- lapply(1:length(items)-1, function(i) sprintf('%s|', items[i]))
return(paste0(do.call(paste0, out), items[length(items)], '\n'))
}
headers <- .makeLine(colnames(Table))
wikiTable <- lapply(1:nrow(Table), function(i) .makeLine(Table[i,]))
return(paste0(headers, do.call(paste0, wikiTable)))
}
makeWikiTable(Params[1:3,])
source('~/Documents/MyProjects/FredScripts/makeWikiTable.R')
markdown <- makeWikiTable(Params)
createWiki('syn2159341', markdown)
head(Params)
createWiki <- function(synId, markdown){
s <- '252206015127_1_1'
gsub('_', '\_', s)
gsub('_', '\\_', s)
gsub('_', '\\\_', s)
gsub('_', '\\\\_', s)
gsub('_', '\\\_', s)
gsub('_', '\\_', s)
gsub('_', '\\\\\_', s)
gsub('_', '"\_', s)
gsub('_', '"\"_', s)
gsub('_', '\"_', s)
gsub('_', '"\_', s)
gsub('_', '"\\_', s)
gsub('_', '\\_', s)
gsub('_', '\\\_', s)
gsub('_', '\"\\_', s)
gsub('_', "'\_", s)
gsub('_', "\'\_", s)
gsub('_', "\\'\_", s)
gsub('_', "\\\_", s)
gsub('_', "\\\\_", s)
gsub('_', "\\'\\_", s)
gsub('_', "\\\_", s)
gsub('_', "_\_", s)
gsub('_', "_\\_", s)
gsub('_', "_\\\_", s)
gsub('_', "\_\\_", s)
gsub('_', "\\_\\_", s)
gsub('_', "\\_'\\_", s)
gsub('_', "\\_'\\\_", s)
gsub('_', "\\_'\_", s)
out <- lapply(1:length(items)-1, function(i) sprintf('%s|', items[i]))
out
out <- sapply(1:length(items)-1, function(i) sprintf('%s|', items[i]))
out
items <- sapply(items, function(item) gsub('_', '-', item))
out <- sapply(1:length(items)-1, function(i) sprintf('%s|', items[i]))
out
source('~/Documents/MyProjects/FredScripts/makeWikiTable.R')
markdown <- makeWikiTable(Params)
createWiki('syn2159341', markdown)
head(Params)
markdown <- makeWikiTable(Params[,c(1:6,12:16)])
createWiki('syn2159341', markdown)
head(segTable)
# the output segTable should be used in GISTIC.
gistic1 <- segTable[,-7]  # using segment means
gistic2 <- segTable[,-6]  # using segment medians
colnames(gistic1) <- colnames(gistic2) <- c('Sample', 'Chromosome',
'Start Position', 'End Position',
'Num markers','Seg.CN')
head(finalTable)
dim(finalTable)
dataSource <- 'syn2116884'
fileName <- 'GISTIC1'
save(gistic1, file = file.path(tempdir(), fileName))
file <- File(file.path(tempdir(), fileName), parentId = parentId, name = fileName)
file <- synStore(file,
activityName = 'GISTIC format (segment means)',
used = list(list(entity = synGet(dataSource, downloadFile = FALSE), wasExecuted = FALSE))
)
parentId
# Save in synapse: 'syn2159341'
parentId <- 'syn2159341'
markdown <- makeWikiTable(Params[,c(1:6,12:16)])
createWiki(parentId, markdown)
dataSource <- 'syn2116884'
fileName <- 'GISTIC1'
save(gistic1, file = file.path(tempdir(), fileName))
file <- File(file.path(tempdir(), fileName), parentId = parentId, name = fileName)
file <- synStore(file,
activityName = 'GISTIC format (segment means)',
used = list(list(entity = synGet(dataSource, downloadFile = FALSE), wasExecuted = FALSE))
)
fileName <- 'GISTIC2'
save(gistic2, file = file.path(tempdir(), fileName))
file <- File(file.path(tempdir(), fileName), parentId = parentId, name = fileName)
file <- synStore(file,
activityName = 'GISTIC format (segment medians)',
used = list(list(entity = synGet(dataSource, downloadFile = FALSE), wasExecuted = FALSE))
)
fileName <- 'segmentSummary'
save(finalTable, file = file.path(tempdir(), fileName))
file <- File(file.path(tempdir(), fileName), parentId = parentId, name = fileName)
file <- synStore(file,
activityName = 'Moscato Segments table summary',
used = list(list(entity = synGet(dataSource, downloadFile = FALSE), wasExecuted = FALSE))
)
fileName <- 'QC_table'
save(Params, file = file.path(tempdir(), fileName))
file <- File(file.path(tempdir(), fileName), parentId = parentId, name = fileName)
file <- synStore(file,
activityName = 'Moscato QC table',
used = list(list(entity = synGet(dataSource, downloadFile = FALSE), wasExecuted = FALSE))
)
plot(Params$nSegments, Params$MAD)
par(op)
plot(Params$nSegments, Params$MAD)
par(mfrow = c(1,1))
plot(Params$nSegments, Params$MAD)
plot(Params$nSegments, log(Params$MAD))
plot(log(Params$nSegments), Params$MAD)
x <- log(Params$nSegments)
y <- Params$MAD
plot(x, y)
abline(lmtest <- lm(y~x))
summary(lmtest)
x <- Params$nSegments
y <- Params$MAD
plot(x, y)
abline(lmtest <- lm(y~x))
summary(lmtest)
x <- log(Params$nSegments)
y <- log(Params$MAD)
plot(x, y)
abline(lmtest <- lm(y~x))
summary(lmtest)
ent <- synGet('syn2141435')
Gistic_maker_file <- get(load(ent@filePath))
ent@filePath
Gistic_maker_file <- readRDS(ent@filePath)
head(Gistic_maker_file)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
head(eset)
ent <- synGet('syn2141399')
hg19 <- read.csv(ent@filePath, header = TRUE, sep = '\t')
hg19
cumLen <- cumsum(hg19$length)
cumLen <- c(0, cumLen[-length(cumLen)])
cumLen <- cumsum(as.numeric(hg19$length))
cumLen <- c(0, cumLen[-length(cumLen)])
cumLen
ent <- synGet('syn2141435')
AgilentDB <- readRDS(ent@filePath)
head(AgilentDB)
Chr <- gsub(':(.)*', '', AgilentDB$TargetID)
Chr
Chr <- gsub('X', 23, Chr); Chr <- gsub('Y', 24, Chr)
Chr
Chr <- gsub('chr', '', Chr)
Chr
table(as.numeric(Chr))
table(as.numeric(Chr), useNA = 'ifany')
AgilentDB[is.na(Chr),]
AgilentDB[which(is.na(Chr)),]
which(is.na(Chr))
AgilentDB[which(is.na(as.numeric(Chr))),]
Chr <- gsub(':(.)*', '', AgilentDB$TargetID)
Chr <- gsub('X', 23, Chr); Chr <- gsub('Y', 24, Chr)
Chr <- as.numeric(gsub('chr', '', Chr))
head(AgilentDB)
Start <- gsub('(.)*:$', '', AgilentDB$TargetID)
Start
Start <- gsub('(.)*:', '', AgilentDB$TargetID)
Start
Loc <- gsub('(.)*:', '', AgilentDB$TargetID)
Start <- gsub('-(.)*', '', Loc)
Start
head(Loc)
head(Start)
End <- gsub('(.)*-', '', Loc)
head(End)
Start <- as.numeric(gsub('-(.)*', '', Loc))
End <- as.numeric(gsub('(.)*-', '', Loc))
AgilentDB[is.na(Start),]
AgilentDB[is.na(End),]
ordCumLen <- sapply(Chr, function(chr){
if(!is.na(chr)) return(cumLen(chr))
else return(NA)
})
ordCumLen <- sapply(Chr, function(chr){
if(!is.na(chr)) return(cumLen[chr]
else return(NA)
})
ordCumLen <- sapply(Chr, function(chr){
if(!is.na(chr)) return(cumLen[chr])
else return(NA)
})
ordCumLen
head(cbind.data.frame(Chr, ordCumLen))
head(cbind.data.frame(Chr, ordCumLen), n = 50)
cumLen
length(Start)
length(End)
length(Chr)
length(ordCumLen)
Start <- Start + cumLen
Start <- Start + ordCumLen
End <- End + ordCumLen
head(AgilentDB)
head(eset)
dim(eset)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
Gistic_maker_file <- cbind.data.frame(Marker\ Name = eset$ProbeName,
Chromosome = eset$ChrNum,
Marker\ Position = eset$genomicPos
)
Gistic_maker_file <- cbind.data.frame(eset$ProbeName, eset$ChrNum, eset$genomicPos)
colnames(Gistic_maker_file) <- c('Marker Name', 'Chromosome', 'Marker Position')
head(Gistic_maker_file)
parentId <- 'syn2159341'
dataSource <- 'syn2116884'
fileName <- 'Gistic_marker_file'
save(Gistic_maker_file, file = file.path(tempdir(), fileName))
file <- File(file.path(tempdir(), fileName), parentId = parentId, name = fileName)
file <- synStore(file,
activityName = 'GISTIC marker file (-mk)',
used = list(list(entity = synGet(dataSource, downloadFile = FALSE), wasExecuted = FALSE))
)
fileName <- 'Gistic_marker_file'
save(Gistic_maker_file, file = file.path(tempdir(), fileName))
file <- File(file.path(tempdir(), fileName), parentId = parentId, name = fileName)
propertyValue(file, 'description') <- 'Gistic marker file (-mk)'
propertyValue(file, 'description')
file <- synStore(file,
activityName = 'GISTIC marker file (-mk)',
used = list(list(entity = synGet(dataSource, downloadFile = FALSE), wasExecuted = FALSE))
)
colnames(finalTable)
head(segTable)
array_list_file <- as.data.frame(array = colnames(finalTable)[-c(1:2)])
array_list_file <- data.frame(array = colnames(finalTable)[-c(1:2)])
head(array_list_file)
Gistic_makers_file <- cbind.data.frame(eset$ProbeName, eset$ChrNum, eset$genomicPos)
colnames(Gistic_makers_file) <- c('Marker Name', 'Chromosome', 'Marker Position')
fileName <- 'Gistic_markers_file'
save(Gistic_maker_file, file = file.path(tempdir(), fileName))
file <- File(file.path(tempdir(), fileName), parentId = parentId, name = fileName)
propertyValue(file, 'description') <- 'Gistic markers file (-mk)'
file <- synStore(file)
fileName <- 'array_list_file'
save(Gistic_maker_file, file = file.path(tempdir(), fileName))
file <- File(file.path(tempdir(), fileName), parentId = parentId, name = fileName)
propertyValue(file, 'description') <- 'GISTIC Array List File (-alf)'
file <- synStore(file)
head(finalTable)
plot(c(min(finalTable$Start), max(finalTable$Stop)), c(-1.5, 1.5), type = 'n')
segments(x0=finalTable$Start, x1=finalTable$Stop, y0=scale(finalTable[,1]))
segments(x0=finalTable$Start, x1=finalTable$Stop, y0=finalTable[,1])
head(finalTable[,1:3])
plot(finalTable$Start, finalTable[,1])
plot(c(min(finalTable$Start), max(finalTable$Stop)), c(-1.5, 1.5), type = 'n')
segments(x0=finalTable$Start, x1=finalTable$Stop, y0=finalTable[,3])
segments(x0=finalTable$Start, x1=finalTable$Stop, y0=scale(finalTable[,3]))
plot(c(min(finalTable$Start), max(finalTable$Stop)), c(-1.5, 1.5), type = 'n')
segments(x0=finalTable$Start, x1=finalTable$Stop, y0=scale(finalTable[,3]))
plot(c(min(finalTable$Start), max(finalTable$Stop)), c(-1.5, 1.5), type = 'n')
sapply(3:ncol(finalTable), function(i) segments(x0=finalTable$Start, x1=finalTable$Stop, y0=finalTable[,i]))
